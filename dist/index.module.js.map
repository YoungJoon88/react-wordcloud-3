{"version":3,"file":"index.module.js","sources":["../src/optimized-d3-cloud.js","../src/utils.js","../src/layout.js","../src/index.js","../src/hooks.js"],"sourcesContent":["// @ts-nocheck\r\n/**\r\n * Author: Augustinas (https://github.com/WhoAteDaCake)\r\n * Source: https://github.com/chrisrzhou/react-wordcloud/blob/166d0b0400a87647fe4e7855a26fe581ce38a502/src/cloud.ts\r\n * TEMPORARY workaround\r\n *\r\n * Implements the wordcloud algorithm based on: https://github.com/jasondavies/d3-cloud/tree/v1.2.5\r\n * Improvements:\r\n *  Use a setTimeout + batch sizes to calculate clouds in order to avoid blocking main thread for two long (87-101)\r\n *\r\n */\r\n\r\n// Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/\r\n// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf\r\n\r\nimport { dispatch } from 'd3-dispatch';\r\n\r\nconst cloudRadians = Math.PI / 180,\r\n  cw = (1 << 11) >> 5,\r\n  ch = 1 << 11;\r\n\r\nexport default function Cloud() {\r\n  let size = [256, 256],\r\n    text = cloudText,\r\n    font = cloudFont,\r\n    fontSize = cloudFontSize,\r\n    fontStyle = cloudFontNormal,\r\n    fontWeight = cloudFontNormal,\r\n    rotate = cloudRotate,\r\n    padding = cloudPadding,\r\n    spiral = archimedeanSpiral,\r\n    words = [],\r\n    timeInterval = Infinity,\r\n    event = dispatch('word', 'end'),\r\n    timer = null,\r\n    random = Math.random,\r\n    cloud = {},\r\n    canvas = cloudCanvas;\r\n\r\n  let killed = false;\r\n\r\n  cloud.canvas = function(_) {\r\n    return arguments.length ? ((canvas = functor(_)), cloud) : canvas;\r\n  };\r\n\r\n  cloud.start = function() {\r\n    let contextAndRatio = getContext(canvas()),\r\n      board = zeroArray((size[0] >> 5) * size[1]),\r\n      bounds = null,\r\n      n = words.length,\r\n      i = -1,\r\n      tags = [],\r\n      data = words\r\n        .map(function(d, i) {\r\n          d.text = text.call(this, d, i);\r\n          d.font = font.call(this, d, i);\r\n          d.style = fontStyle.call(this, d, i);\r\n          d.weight = fontWeight.call(this, d, i);\r\n          d.rotate = rotate.call(this, d, i);\r\n          d.size = ~~fontSize.call(this, d, i);\r\n          d.padding = padding.call(this, d, i);\r\n          return d;\r\n        })\r\n        .sort(function(a, b) {\r\n          return b.size - a.size;\r\n        });\r\n\r\n    // Added by react-wordcloud\r\n    // Allows to calculate a subset of data instead of all of the words at once\r\n    function multiStep(from, to) {\r\n      for (let i = from; i < to; i += 1) {\r\n        const d = data[i];\r\n        d.x = (size[0] * (random() + 0.5)) >> 1;\r\n        d.y = (size[1] * (random() + 0.5)) >> 1;\r\n        cloudSprite(contextAndRatio, d, data, i);\r\n        if (d.hasText && place(board, d, bounds)) {\r\n          tags.push(d);\r\n          event.call('word', cloud, d);\r\n          if (bounds) cloudBounds(bounds, d);\r\n          else\r\n            bounds = [\r\n              { x: d.x + d.x0, y: d.y + d.y0 },\r\n              { x: d.x + d.x1, y: d.y + d.y1 },\r\n            ];\r\n          // Temporary hack\r\n          d.x -= size[0] >> 1;\r\n          d.y -= size[1] >> 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Added by react-wordcloud\r\n    // Iterates dataset using setTimeout in order to prevent blocking of the main thread\r\n    function loop(i) {\r\n      const step = 50;\r\n      const from = i * step;\r\n      const to = Math.min((i + 1) * step, words.length);\r\n      multiStep(from, to);\r\n      if (killed) {\r\n        return;\r\n      }\r\n      if (to < words.length) {\r\n        setTimeout(() => loop(i + 1), 0);\r\n      } else {\r\n        cloud.stop();\r\n        event.call('end', cloud, tags, bounds);\r\n      }\r\n    }\r\n    setTimeout(() => loop(0), 0);\r\n\r\n    return cloud;\r\n  };\r\n\r\n  cloud.revive = () => {\r\n    killed = false;\r\n    return cloud;\r\n  };\r\n\r\n  cloud.stop = function() {\r\n    if (timer) {\r\n      clearInterval(timer);\r\n      timer = null;\r\n    }\r\n    killed = true;\r\n    return cloud;\r\n  };\r\n\r\n  function getContext(canvas) {\r\n    canvas.width = canvas.height = 1;\r\n    const ratio = Math.sqrt(\r\n      canvas.getContext('2d', {willReadFrequently: true}).getImageData(0, 0, 1, 1).data.length >> 2,\r\n    );\r\n    canvas.width = (cw << 5) / ratio;\r\n    canvas.height = ch / ratio;\r\n\r\n    const context = canvas.getContext('2d', {willReadFrequently: true});\r\n    context.fillStyle = context.strokeStyle = 'red';\r\n    context.textAlign = 'center';\r\n\r\n    return { context: context, ratio: ratio };\r\n  }\r\n\r\n  function place(board, tag, bounds) {\r\n    let perimeter = [{ x: 0, y: 0 }, { x: size[0], y: size[1] }],\r\n      startX = tag.x,\r\n      startY = tag.y,\r\n      maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),\r\n      s = spiral(size),\r\n      dt = random() < 0.5 ? 1 : -1,\r\n      t = -dt,\r\n      dxdy,\r\n      dx,\r\n      dy;\r\n\r\n    while ((dxdy = s((t += dt)))) {\r\n      dx = ~~dxdy[0];\r\n      dy = ~~dxdy[1];\r\n\r\n      if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;\r\n\r\n      tag.x = startX + dx;\r\n      tag.y = startY + dy;\r\n\r\n      if (\r\n        tag.x + tag.x0 < 0 ||\r\n        tag.y + tag.y0 < 0 ||\r\n        tag.x + tag.x1 > size[0] ||\r\n        tag.y + tag.y1 > size[1]\r\n      )\r\n        continue;\r\n      // TODO only check for collisions within current bounds.\r\n      if (!bounds || !cloudCollide(tag, board, size[0])) {\r\n        if (!bounds || collideRects(tag, bounds)) {\r\n          var sprite = tag.sprite,\r\n            w = tag.width >> 5,\r\n            sw = size[0] >> 5,\r\n            lx = tag.x - (w << 4),\r\n            sx = lx & 0x7f,\r\n            msx = 32 - sx,\r\n            h = tag.y1 - tag.y0,\r\n            x = (tag.y + tag.y0) * sw + (lx >> 5),\r\n            last;\r\n          for (let j = 0; j < h; j++) {\r\n            last = 0;\r\n            for (let i = 0; i <= w; i++) {\r\n              board[x + i] |=\r\n                (last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);\r\n            }\r\n            x += sw;\r\n          }\r\n          delete tag.sprite;\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  cloud.timeInterval = function(_) {\r\n    return arguments.length\r\n      ? ((timeInterval = _ == null ? Infinity : _), cloud)\r\n      : timeInterval;\r\n  };\r\n\r\n  cloud.words = function(_) {\r\n    return arguments.length ? ((words = _), cloud) : words;\r\n  };\r\n\r\n  cloud.size = function(_) {\r\n    return arguments.length ? ((size = [+_[0], +_[1]]), cloud) : size;\r\n  };\r\n\r\n  cloud.font = function(_) {\r\n    return arguments.length ? ((font = functor(_)), cloud) : font;\r\n  };\r\n\r\n  cloud.fontStyle = function(_) {\r\n    return arguments.length ? ((fontStyle = functor(_)), cloud) : fontStyle;\r\n  };\r\n\r\n  cloud.fontWeight = function(_) {\r\n    return arguments.length ? ((fontWeight = functor(_)), cloud) : fontWeight;\r\n  };\r\n\r\n  cloud.rotate = function(_) {\r\n    return arguments.length ? ((rotate = functor(_)), cloud) : rotate;\r\n  };\r\n\r\n  cloud.text = function(_) {\r\n    return arguments.length ? ((text = functor(_)), cloud) : text;\r\n  };\r\n\r\n  cloud.spiral = function(_) {\r\n    return arguments.length ? ((spiral = spirals[_] || _), cloud) : spiral;\r\n  };\r\n\r\n  cloud.fontSize = function(_) {\r\n    return arguments.length ? ((fontSize = functor(_)), cloud) : fontSize;\r\n  };\r\n\r\n  cloud.padding = function(_) {\r\n    return arguments.length ? ((padding = functor(_)), cloud) : padding;\r\n  };\r\n\r\n  cloud.random = function(_) {\r\n    return arguments.length ? ((random = _), cloud) : random;\r\n  };\r\n\r\n  cloud.on = function() {\r\n    const value = event.on.apply(event, arguments);\r\n    return value === event ? cloud : value;\r\n  };\r\n\r\n  return cloud;\r\n}\r\n\r\nfunction cloudText(d) {\r\n  return d.text;\r\n}\r\n\r\nfunction cloudFont() {\r\n  return 'serif';\r\n}\r\n\r\nfunction cloudFontNormal() {\r\n  return 'normal';\r\n}\r\n\r\nfunction cloudFontSize(d) {\r\n  return Math.sqrt(d.value);\r\n}\r\n\r\nfunction cloudRotate() {\r\n  return (~~(Math.random() * 6) - 3) * 30;\r\n}\r\n\r\nfunction cloudPadding() {\r\n  return 1;\r\n}\r\n\r\n// Fetches a monochrome sprite bitmap for the specified text.\r\n// Load in batches for speed.\r\nfunction cloudSprite(contextAndRatio, d, data, di) {\r\n  if (d.sprite) return;\r\n  const c = contextAndRatio.context,\r\n    ratio = contextAndRatio.ratio;\r\n\r\n  c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);\r\n  let x = 0,\r\n    y = 0,\r\n    maxh = 0,\r\n    n = data.length;\r\n  --di;\r\n  while (++di < n) {\r\n    d = data[di];\r\n    c.save();\r\n    c.font =\r\n      d.style +\r\n      ' ' +\r\n      d.weight +\r\n      ' ' +\r\n      ~~((d.size + 1) / ratio) +\r\n      'px ' +\r\n      d.font;\r\n    var w = c.measureText(d.text + 'm').width * ratio,\r\n      h = d.size << 1;\r\n    if (d.rotate) {\r\n      const sr = Math.sin(d.rotate * cloudRadians),\r\n        cr = Math.cos(d.rotate * cloudRadians),\r\n        wcr = w * cr,\r\n        wsr = w * sr,\r\n        hcr = h * cr,\r\n        hsr = h * sr;\r\n      w =\r\n        ((Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f) >> 5) << 5;\r\n      h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));\r\n    } else {\r\n      w = ((w + 0x1f) >> 5) << 5;\r\n    }\r\n    if (h > maxh) maxh = h;\r\n    if (x + w >= cw << 5) {\r\n      x = 0;\r\n      y += maxh;\r\n      maxh = 0;\r\n    }\r\n    if (y + h >= ch) break;\r\n    c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);\r\n    if (d.rotate) c.rotate(d.rotate * cloudRadians);\r\n    c.fillText(d.text, 0, 0);\r\n\r\n    if (d.padding) {\r\n      c.lineWidth = 2 * d.padding;\r\n      c.strokeText(d.text, 0, 0);\r\n    }\r\n    c.restore();\r\n    d.width = w;\r\n    d.height = h;\r\n    d.xoff = x;\r\n    d.yoff = y;\r\n    d.x1 = w >> 1;\r\n    d.y1 = h >> 1;\r\n    d.x0 = -d.x1;\r\n    d.y0 = -d.y1;\r\n    d.hasText = true;\r\n    x += w;\r\n  }\r\n  const pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,\r\n    sprite = [];\r\n  while (--di >= 0) {\r\n    d = data[di];\r\n    if (!d.hasText) continue;\r\n    var w = d.width,\r\n      w32 = w >> 5,\r\n      h = d.y1 - d.y0;\r\n    // Zero the buffer\r\n    for (var i = 0; i < h * w32; i++) sprite[i] = 0;\r\n    x = d.xoff;\r\n    if (x == null) return;\r\n    y = d.yoff;\r\n    let seen = 0,\r\n      seenRow = -1;\r\n    for (let j = 0; j < h; j++) {\r\n      for (var i = 0; i < w; i++) {\r\n        const k = w32 * j + (i >> 5),\r\n          m = pixels[((y + j) * (cw << 5) + (x + i)) << 2]\r\n            ? 1 << (31 - (i % 32))\r\n            : 0;\r\n        sprite[k] |= m;\r\n        seen |= m;\r\n      }\r\n      if (seen) seenRow = j;\r\n      else {\r\n        d.y0++;\r\n        h--;\r\n        j--;\r\n        y++;\r\n      }\r\n    }\r\n    d.y1 = d.y0 + seenRow;\r\n    d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);\r\n  }\r\n}\r\n\r\n// Use mask-based collision detection.\r\nfunction cloudCollide(tag, board, sw) {\r\n  sw >>= 5;\r\n  let sprite = tag.sprite,\r\n    w = tag.width >> 5,\r\n    lx = tag.x - (w << 4),\r\n    sx = lx & 0x7f,\r\n    msx = 32 - sx,\r\n    h = tag.y1 - tag.y0,\r\n    x = (tag.y + tag.y0) * sw + (lx >> 5),\r\n    last;\r\n  for (let j = 0; j < h; j++) {\r\n    last = 0;\r\n    for (let i = 0; i <= w; i++) {\r\n      if (\r\n        ((last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) &\r\n        board[x + i]\r\n      )\r\n        return true;\r\n    }\r\n    x += sw;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction cloudBounds(bounds, d) {\r\n  const b0 = bounds[0],\r\n    b1 = bounds[1];\r\n  if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;\r\n  if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;\r\n  if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;\r\n  if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;\r\n}\r\n\r\nfunction collideRects(a, b) {\r\n  return (\r\n    a.x + a.x1 > b[0].x &&\r\n    a.x + a.x0 < b[1].x &&\r\n    a.y + a.y1 > b[0].y &&\r\n    a.y + a.y0 < b[1].y\r\n  );\r\n}\r\n\r\nfunction archimedeanSpiral(size) {\r\n  const e = size[0] / size[1];\r\n  return function(t) {\r\n    return [e * (t *= 0.1) * Math.cos(t), t * Math.sin(t)];\r\n  };\r\n}\r\n\r\nfunction rectangularSpiral(size) {\r\n  let dy = 4,\r\n    dx = (dy * size[0]) / size[1],\r\n    x = 0,\r\n    y = 0;\r\n  return function(t) {\r\n    const sign = t < 0 ? -1 : 1;\r\n    // See triangular numbers: T_n = n * (n + 1) / 2.\r\n    switch ((Math.sqrt(1 + 4 * sign * t) - sign) & 3) {\r\n      case 0:\r\n        x += dx;\r\n        break;\r\n      case 1:\r\n        y += dy;\r\n        break;\r\n      case 2:\r\n        x -= dx;\r\n        break;\r\n      default:\r\n        y -= dy;\r\n        break;\r\n    }\r\n    return [x, y];\r\n  };\r\n}\r\n\r\nfunction zeroArray(n) {\r\n  const a = new Uint32Array(n);\r\n  return a;\r\n}\r\n\r\nfunction cloudCanvas() {\r\n  return document.createElement('canvas');\r\n}\r\n\r\nfunction functor(d) {\r\n  return typeof d === 'function'\r\n    ? d\r\n    : function() {\r\n        return d;\r\n      };\r\n}\r\n\r\nvar spirals = {\r\n  archimedean: archimedeanSpiral,\r\n  rectangular: rectangularSpiral,\r\n};\r\n","import { max, min, range } from 'd3-array';\r\nimport { scaleLinear, scaleLog, scaleOrdinal, scaleSqrt } from 'd3-scale';\r\nimport { schemeCategory10 } from 'd3-scale-chromatic';\r\n\r\nexport function choose(array, random) {\r\n  return array[Math.floor(random() * array.length)];\r\n}\r\n\r\nexport function getDefaultColors() {\r\n  return range(20)\r\n    .map(number => number.toString())\r\n    .map(scaleOrdinal(schemeCategory10));\r\n}\r\n\r\nexport function getFontScale(words, fontSizes, scale) {\r\n  const minSize = min(words, word => Number(word.value));\r\n  const maxSize = max(words, word => Number(word.value));\r\n  let scaleFunction;\r\n  switch (scale) {\r\n    case 'log':\r\n      scaleFunction = scaleLog;\r\n      break;\r\n    case 'sqrt':\r\n      scaleFunction = scaleSqrt;\r\n      break;\r\n    case 'linear':\r\n    default:\r\n      scaleFunction = scaleLinear;\r\n      break;\r\n  }\r\n\r\n  const fontScale = scaleFunction()\r\n    .domain([minSize, maxSize])\r\n    .range(fontSizes);\r\n  return fontScale;\r\n}\r\n\r\nexport function getFontSize(word) {\r\n  return `${word.size}px`;\r\n}\r\n\r\nexport function getText(word) {\r\n  return word.text;\r\n}\r\n\r\nexport function getTransform(word) {\r\n  const translate = `translate(${word.x}, ${word.y})`;\r\n  const rotate =\r\n    typeof word.rotate === 'number' ? `rotate(${word.rotate})` : '';\r\n  return translate + rotate;\r\n}\r\n\r\nexport function rotate(rotations, rotationAngles, random) {\r\n  if (rotations < 1) {\r\n    return 0;\r\n  }\r\n\r\n  let angles = [];\r\n  if (rotations === 1) {\r\n    angles = [rotationAngles[0]];\r\n  } else {\r\n    angles = [...rotationAngles];\r\n    const increment = (rotationAngles[1] - rotationAngles[0]) / (rotations - 1);\r\n    let angle = rotationAngles[0] + increment;\r\n    while (angle < rotationAngles[1]) {\r\n      angles.push(angle);\r\n      angle += increment;\r\n    }\r\n  }\r\n\r\n  return choose(angles, random);\r\n}\r\n","import 'd3-transition';\r\n\r\nimport { descending } from 'd3-array';\r\nimport d3Cloud from 'd3-cloud';\r\nimport { event } from 'd3-selection';\r\nimport clonedeep from 'lodash.clonedeep';\r\nimport isEmpty from 'lodash.isempty';\r\nimport seedrandom from 'seedrandom';\r\nimport tippy from 'tippy.js';\r\n\r\nimport optimizedD3Cloud from './optimized-d3-cloud';\r\nimport {\r\n  choose,\r\n  getFontScale,\r\n  getFontSize,\r\n  getText,\r\n  getTransform,\r\n  rotate,\r\n} from './utils';\r\n\r\nexport function render({ callbacks, options, random, selection, words, activeWords }) {\r\n  const {\r\n    getWordColor,\r\n    getWordTooltip,\r\n    onWordClick,\r\n    onWordMouseOver,\r\n    onWordMouseOut,\r\n  } = callbacks;\r\n  const {\r\n    colors,\r\n    enableTooltip,\r\n    fontStyle,\r\n    fontWeight,\r\n    textAttributes,\r\n    tooltipOptions,\r\n  } = options;\r\n  const { fontFamily, transitionDuration } = options;\r\n\r\n  function getClass(word) {\r\n    return !isEmpty(activeWords) && activeWords.includes(word.text) ? 'active' : 'in-active'\r\n  }\r\n\r\n  function getFill(word) {\r\n    return getWordColor ? getWordColor(word) : choose(colors, random);\r\n  }\r\n\r\n  // Load words\r\n  let tooltipInstance;\r\n  const vizWords = selection.selectAll('text').data(words);\r\n  vizWords.join(\r\n    enter => {\r\n      let text = enter\r\n        .append('text')\r\n        .on('click', word => {\r\n          if (onWordClick) {\r\n            onWordClick(word, event);\r\n          }\r\n        })\r\n        .on('mouseover', word => {\r\n          if (\r\n            enableTooltip &&\r\n            (!tooltipInstance || tooltipInstance.isDestroyed)\r\n          ) {\r\n            tooltipInstance = tippy(event.target, {\r\n              animation: 'scale',\r\n              arrow: true,\r\n              content: () => getWordTooltip(word),\r\n              onHidden: (instance) => {\r\n                instance.destroy();\r\n                tooltipInstance = null;\r\n              },\r\n              ...tooltipOptions,\r\n            });\r\n          }\r\n\r\n          if (onWordMouseOver) {\r\n            onWordMouseOver(word, event);\r\n          }\r\n        })\r\n        .on('mouseout', word => {\r\n          if (tooltipInstance && !tooltipInstance.state.isVisible) {\r\n            tooltipInstance.destroy();\r\n          }\r\n\r\n          if (onWordMouseOut) {\r\n            onWordMouseOut(word, event);\r\n          }\r\n        })\r\n        .attr('cursor', onWordClick ? 'pointer' : 'default')\r\n        .attr('fill', getFill)\r\n        .attr('font-family', fontFamily)\r\n        .attr('font-style', fontStyle)\r\n        .attr('font-weight', fontWeight)\r\n        .attr('text-anchor', 'middle')\r\n        .attr('transform', 'translate(0, 0) rotate(0)');\r\n\r\n      if (typeof textAttributes === 'object') {\r\n        Object.keys(textAttributes).forEach(key => {\r\n          text = text.attr(key, textAttributes[key]);\r\n        });\r\n      }\r\n\r\n      text = text.call(enter =>\r\n        enter\r\n          .transition()\r\n          .duration(transitionDuration)\r\n          .attr('class', getClass)\r\n          .attr('font-size', getFontSize)\r\n          .attr('transform', getTransform)\r\n          .text(getText),\r\n      );\r\n    },\r\n    update => {\r\n      update\r\n        .transition()\r\n        .duration(transitionDuration)\r\n        .attr('class', getClass)\r\n        .attr('fill', getFill)\r\n        .attr('font-family', fontFamily)\r\n        .attr('font-size', getFontSize)\r\n        .attr('transform', getTransform)\r\n        .text(getText);\r\n    },\r\n    exit => {\r\n      exit\r\n        .transition()\r\n        .duration(transitionDuration)\r\n        .attr('fill-opacity', 0)\r\n        .remove();\r\n    },\r\n  );\r\n}\r\n\r\nexport function layout({\r\n  callbacks,\r\n  maxWords,\r\n  options,\r\n  selection,\r\n  size,\r\n  words,\r\n  activeWords\r\n}) {\r\n  const MAX_LAYOUT_ATTEMPTS = 10;\r\n  const SHRINK_FACTOR = 0.95;\r\n  const {\r\n    deterministic,\r\n    enableOptimizations,\r\n    fontFamily,\r\n    fontStyle,\r\n    fontSizes,\r\n    fontWeight,\r\n    padding,\r\n    randomSeed,\r\n    rotations,\r\n    rotationAngles,\r\n    spiral,\r\n    scale,\r\n  } = options;\r\n\r\n  const sortedWords = words\r\n    .concat()\r\n    .sort((x, y) => descending(x.value, y.value))\r\n    .slice(0, maxWords);\r\n\r\n  const random = seedrandom(\r\n    deterministic ? randomSeed || 'deterministic' : null,\r\n  );\r\n\r\n  let cloud;\r\n  if (enableOptimizations) {\r\n    cloud = optimizedD3Cloud();\r\n  } else {\r\n    cloud = d3Cloud();\r\n  }\r\n\r\n  cloud\r\n    .size(size)\r\n    // @ts-ignore\r\n    .padding(padding)\r\n    .words(clonedeep(sortedWords))\r\n    .rotate(() => {\r\n      if (rotations === undefined) {\r\n        // Default rotation algorithm\r\n        return (~~(random() * 6) - 3) * 30;\r\n      }\r\n\r\n      return rotate(rotations, rotationAngles, random);\r\n    })\r\n    .spiral(spiral)\r\n    .random(random)\r\n    .text(getText)\r\n    .font(fontFamily)\r\n    .fontStyle(fontStyle)\r\n    .fontWeight(fontWeight);\r\n\r\n  function draw(fontSizes, attempts = 1) {\r\n    if (enableOptimizations) {\r\n      cloud.revive();\r\n    }\r\n\r\n    cloud\r\n      .fontSize(word => {\r\n        const fontScale = getFontScale(sortedWords, fontSizes, scale);\r\n        return fontScale(word.value);\r\n      })\r\n      .on('end', computedWords => {\r\n        /** KNOWN ISSUE: https://github.com/jasondavies/d3-cloud/issues/36\r\n         * Recursively layout and decrease font-sizes by a SHRINK_FACTOR.\r\n         * Bail out with a warning message after MAX_LAYOUT_ATTEMPTS.\r\n         */\r\n        if (\r\n          sortedWords.length !== computedWords.length &&\r\n          attempts <= MAX_LAYOUT_ATTEMPTS\r\n        ) {\r\n          if (attempts === MAX_LAYOUT_ATTEMPTS) {\r\n            console.warn(\r\n              `Unable to layout ${sortedWords.length -\r\n                computedWords.length} word(s) after ${attempts} attempts.  Consider: (1) Increasing the container/component size. (2) Lowering the max font size. (3) Limiting the rotation angles.`,\r\n            );\r\n          }\r\n\r\n          const minFontSize = Math.max(fontSizes[0] * SHRINK_FACTOR, 1);\r\n          const maxFontSize = Math.max(\r\n            fontSizes[1] * SHRINK_FACTOR,\r\n            minFontSize,\r\n          );\r\n\r\n          draw([minFontSize, maxFontSize], attempts + 1);\r\n        } else {\r\n          render({\r\n            callbacks,\r\n            options,\r\n            random,\r\n            selection,\r\n            words: computedWords,\r\n            activeWords: activeWords\r\n          });\r\n        }\r\n      })\r\n      .start();\r\n  }\r\n\r\n  draw(fontSizes);\r\n}\r\n","import debounce from 'lodash.debounce';\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\nimport { useResponsiveSvgSelection } from './hooks';\r\nimport { layout } from './layout';\r\nimport { getDefaultColors } from './utils';\r\n\r\nexport const defaultCallbacks = {\r\n  getWordTooltip: ({ text, value }) => `${text} (${value})`,\r\n};\r\n\r\nexport const defaultOptions = {\r\n  colors: getDefaultColors(),\r\n  deterministic: false,\r\n  enableOptimizations: false,\r\n  enableTooltip: true,\r\n  fontFamily: 'times new roman',\r\n  fontSizes: [4, 32],\r\n  fontStyle: 'normal',\r\n  fontWeight: 'normal',\r\n  padding: 1,\r\n  rotationAngles: [-90, 90],\r\n  scale: 'sqrt',\r\n  spiral: 'rectangular',\r\n  tooltipOptions: {},\r\n  transitionDuration: 600,\r\n};\r\n\r\nfunction ReactWordCloud({\r\n  callbacks,\r\n  maxWords = 100,\r\n  minSize,\r\n  options,\r\n  size: initialSize,\r\n  words,\r\n  activeWords,\r\n  ...rest\r\n}) {\r\n  const [ref, selection, size] = useResponsiveSvgSelection(\r\n    minSize,\r\n    initialSize,\r\n    options.svgAttributes,\r\n  );\r\n\r\n  const render = useRef(debounce(layout, 100));\r\n\r\n  useEffect(() => {\r\n    if (selection) {\r\n      const mergedCallbacks = { ...defaultCallbacks, ...callbacks };\r\n      const mergedOptions = { ...defaultOptions, ...options };\r\n\r\n      render.current({\r\n        callbacks: mergedCallbacks,\r\n        maxWords,\r\n        options: mergedOptions,\r\n        selection,\r\n        size,\r\n        words,\r\n        activeWords\r\n      });\r\n    }\r\n  }, [maxWords, callbacks, options, selection, size, words, activeWords]);\r\n\r\n  return <div ref={ref} style={{ height: '100%', width: '100%' }} {...rest} />;\r\n}\r\n\r\nReactWordCloud.defaultProps = {\r\n  callbacks: defaultCallbacks,\r\n  maxWords: 100,\r\n  minSize: [300, 300],\r\n  options: defaultOptions,\r\n};\r\n\r\nexport default ReactWordCloud;\r\n","import { select } from 'd3-selection';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\n\r\nexport function useResponsiveSvgSelection(minSize, initialSize, svgAttributes) {\r\n  const elementRef = useRef();\r\n  const [size, setSize] = useState(initialSize);\r\n  const [selection, setSelection] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const element = elementRef.current;\r\n\r\n    // Set svg selection\r\n    let svg = select(element)\r\n      .append('svg')\r\n      .style('display', 'block'); // Native inline svg leaves undesired white space\r\n\r\n    if (typeof svgAttributes === 'object') {\r\n      Object.keys(svgAttributes).forEach(key => {\r\n        svg = svg.attr(key, svgAttributes[key]);\r\n      });\r\n    }\r\n\r\n    const selection = svg.append('g');\r\n    setSelection(selection);\r\n\r\n    function updateSize(width, height) {\r\n      svg.attr('height', height).attr('width', width);\r\n      selection.attr('transform', `translate(${width / 2}, ${height / 2})`);\r\n      setSize([width, height]);\r\n    }\r\n\r\n    let width = 0;\r\n    let height = 0;\r\n    if (initialSize === undefined) {\r\n      // Use parentNode size if resized has not occurred\r\n      width = element.parentElement.offsetWidth;\r\n      height = element.parentElement.offsetHeight;\r\n    } else {\r\n      // Use initialSize if it is provided\r\n      [width, height] = initialSize;\r\n    }\r\n\r\n    width = Math.max(width, minSize[0]);\r\n    height = Math.max(height, minSize[1]);\r\n    updateSize(width, height);\r\n\r\n    // Update resize using a resize observer\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      if (!entries || entries.length === 0) {\r\n        return;\r\n      }\r\n\r\n      if (initialSize === undefined) {\r\n        const { width, height } = entries[0].contentRect;\r\n        updateSize(width, height);\r\n      }\r\n    });\r\n    resizeObserver.observe(element);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      resizeObserver.unobserve(element);\r\n      select(element)\r\n        .selectAll('*')\r\n        .remove();\r\n    };\r\n  }, [initialSize, minSize, svgAttributes]);\r\n\r\n  return [elementRef, selection, size];\r\n}\r\n"],"names":["cloudRadians","Math","PI","cloudText","d","text","cloudFont","cloudFontNormal","cloudFontSize","sqrt","value","cloudRotate","random","cloudPadding","cloudSprite","contextAndRatio","data","di","sprite","c","context","ratio","clearRect","x","y","maxh","n","length","save","font","style","weight","size","w","measureText","width","h","rotate","sr","sin","cr","cos","wcr","wsr","hcr","hsr","max","abs","cw","translate","fillText","padding","lineWidth","strokeText","restore","height","xoff","yoff","x1","y1","x0","y0","hasText","pixels","getImageData","w32","i","seen","seenRow","j","m","slice","cloudCollide","tag","board","sw","last","lx","sx","msx","cloudBounds","bounds","b0","b1","archimedeanSpiral","e","t","cloudCanvas","document","createElement","functor","spirals","archimedean","rectangular","dx","sign","choose","array","floor","getFontSize","word","getText","getTransform","layout","_ref2","cloud","callbacks","maxWords","options","selection","activeWords","deterministic","enableOptimizations","fontFamily","fontStyle","fontSizes","fontWeight","randomSeed","rotations","rotationAngles","spiral","scale","sortedWords","words","concat","sort","descending","seedrandom","fontSize","timeInterval","Infinity","event","dispatch","canvas","killed","place","dxdy","dy","a","b","startX","startY","maxDelta","s","dt","min","_","arguments","start","getContext","willReadFrequently","fillStyle","strokeStyle","textAlign","Uint32Array","tags","map","call","this","setTimeout","loop","from","to","push","multiStep","stop","revive","on","apply","optimizedD3Cloud","d3Cloud","clonedeep","undefined","angles","increment","angle","draw","attempts","scaleFunction","minSize","Number","maxSize","scaleLog","scaleSqrt","scaleLinear","domain","range","getFontScale","fontScale","computedWords","console","warn","minFontSize","_ref","tooltipInstance","getWordColor","getWordTooltip","onWordClick","onWordMouseOver","onWordMouseOut","colors","enableTooltip","textAttributes","tooltipOptions","transitionDuration","getClass","isEmpty","includes","getFill","selectAll","join","enter","append","isDestroyed","tippy","target","_extends","animation","arrow","content","onHidden","instance","destroy","state","isVisible","attr","Object","keys","forEach","key","transition","duration","update","exit","remove","render","defaultCallbacks","defaultOptions","number","toString","scaleOrdinal","schemeCategory10","ReactWordCloud","_ref2$maxWords","initialSize","rest","_objectWithoutPropertiesLoose","_excluded","_useResponsiveSvgSele","svgAttributes","elementRef","useRef","_useState","useState","setSize","_useState2","setSelection","useEffect","element","current","svg","select","updateSize","parentElement","offsetWidth","offsetHeight","resizeObserver","ResizeObserver","entries","_entries$0$contentRec","contentRect","observe","unobserve","useResponsiveSvgSelection","ref","debounce","mergedCallbacks","mergedOptions","React","defaultProps"],"mappings":"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"}